<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <cm:property-placeholder persistent-id="org.opennms.ng.services.capsd" id="capsd" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="openjpa.jdbc.DBDictionary" value="hsql"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <bean id="eventdProcessor" class="org.opennms.ng.services.eventd.EventTranslator"/>

    <bean id="eventdRoute" class="org.opennms.ng.services.eventd.EventDRoute">
        <property name="location" value="jms:eventd?concurrentConsumers=5"/>
        <property name="processor" ref="eventdEventHandler"/>
    </bean>

    <!-- The original eventd processors that we will call in the route -->

    <reference id="eventdConfigManager" interface="org.opennms.ng.services.eventconfig.EventdConfigManagement"/>

    <reference id="eventConfDao" interface="org.opennms.ng.services.eventconfig.EventConfDao"/>

    <bean id="eventWriter" class="org.opennms.ng.services.eventd.processor.JdbcEventWriter">
        <property name="getNextIdString" ref="getNextEventIdSql"/>
        <property name="dataSource" ref="nonJTA"/>
        <property name="eventdServiceManager" ref="eventdServiceManager"/>
    </bean>

    <bean id="eventExpander" class="org.opennms.ng.services.eventconfig.EventExpander" init-method="afterPropertiesSet">
        <property name="eventConfDao" ref="eventConfDao"/>
    </bean>

    <bean id="eventdServiceManager" class="org.opennms.ng.services.eventd.DaoEventdServiceManager">
        <!--
         <property name="serviceTypeDao" ref="serviceTypeDao"/>

         -->
    </bean>

    <bean id="getNextEventIdSql" factory-ref="eventdConfigManager" factory-method="getGetNextEventID"/>

    <reference id="jta" interface="javax.sql.DataSource"
               filter="(transactional=true)" availability="mandatory"/>

    <reference id="nonJTA" interface="javax.sql.DataSource"
               filter="(transactional=false)" availability="mandatory"/>

    <bean id="eventdEventHandler" class="org.opennms.ng.services.eventd.EventTranslator">

        <!-- TODO - These right now are runnables that perform data manipulation, technically they could be processors.  (Same difference)-->

        <property name="eventProcessors">
            <list>
                <!--
                  This EventProcessor can be used to perform regex replacements on incoming parm values.
                  It was added in 1.11 and because of performance concerns, it is commented-out for now.
                -->
                <!-- <ref local="eventParmRegexFilter"/> -->

                <ref component-id="eventExpander"/>
                <ref component-id="eventWriter"/>

                <!-- TODO Turn this into a subscriber system -->

                <!--
                <ref local="eventIpcBroadcastProcessor"/>
                -->
            </list>
        </property>
    </bean>

    <reference id="jmsConsumerPool" interface="javax.jms.ConnectionFactory" filter="(pooled=false)"/>

    <reference id="jmsProducerPool" interface="javax.jms.ConnectionFactory" filter="(pooled=true)"/>

    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="jmsConsumerPool"/>
        <property name="templateConnectionFactory" ref="jmsProducerPool"/>
    </bean>

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>

    <camel:camelContext xmlns="http://camel.apache.org/schema/blueprint" id="capsdRouteContext">
        <routeBuilder ref="capsdRoute"/>
    </camel:camelContext>



    <!-- Original capsd-spring-context -->

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:annotation-config />

    <bean name="xmlRpcNotifier" class="org.opennms.netmgt.capsd.XmlRpcEventHandlerNotifier" >
        <property name="xmlRpcEnabled">
            <util:property-path path="capsdConfig.xmlRpcEnabled" />
        </property>
    </bean>

    <bean name="pluginManager" class="org.opennms.netmgt.capsd.PluginManager">
        <property name="capsdConfig" ref="capsdConfig" />
    </bean>

    <bean name="suspectEventProcessorFactory,rescanProcessorFactory" class="org.opennms.netmgt.capsd.DefaultProcessorFactory">
        <property name="capsdDbSyncer" ref="syncer"/>
        <property name="pluginManager" ref="pluginManager"/>
    </bean>


    <bean id="suspectRunner" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool">
        <constructor-arg>
          <util:property-path path="capsdConfig.maxSuspectThreadPoolSize" />
        </constructor-arg>
        <!-- <property name="name" value="Capsd Suspect Pool" /> -->
    </bean>

    <bean id="rescanRunner" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool">
        <constructor-arg>
          <util:property-path path="capsdConfig.maxRescanThreadPoolSize" />
        </constructor-arg>
        <!-- <property name="name" value="Capsd Rescan Pool" /> -->
    </bean>

    <bean name="capsdScheduler" class="org.opennms.netmgt.capsd.Scheduler">
        <constructor-arg ref="rescanRunner"/>
        <constructor-arg ref="rescanProcessorFactory"/>
    </bean>

    <bean name="capsdBroadcastProcessor" class="org.opennms.netmgt.capsd.BroadcastEventProcessor">
        <property name="scheduler" ref="capsdScheduler" />
        <property name="suspectEventProcessorFactory" ref="suspectEventProcessorFactory"/>
        <property name="suspectQueue" ref="suspectRunner"/>
        <property name="localServer">
          <util:property-path path="onmsServerConfig.serverName" />
        </property>
    </bean>

    <bean name="capsdEventListenerAdapter" class="org.opennms.netmgt.model.events.AnnotationBasedEventListenerAdapter">
        <property name="annotatedListener" ref="capsdBroadcastProcessor" />
        <property name="eventSubscriptionService" ref="eventSubscriptionService" />
    </bean>


  <!-- Need to get the constructor args in place first
    <bean name="capsdAnnotatedEventHandler" class="org.opennms.netmgt.capsd.BroadcastEventProcessor">
    </bean>
   -->


    <bean name="daemon" class="org.opennms.netmgt.capsd.Capsd">
        <property name="suspectRunner" ref="suspectRunner" />
        <property name="rescanRunner" ref="rescanRunner" />
        <property name="eventListener" ref="capsdEventListenerAdapter" />
    </bean>




</blueprint>